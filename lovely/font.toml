[manifest]
version = "0.1.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = '''=[SMODS Steamodded "src/game_object.lua"]'''
pattern = '''function SMODS.GameObject:obj_list(reversed)
        local lb, ub, step = 1, #self.obj_buffer, 1
        if reversed then lb, ub, step = ub, lb, -1 end
        local res = {}
        for i = lb, ub, step do
          res[#res+1] = self.obj_table[self.obj_buffer[i]]
        end
        return res
    end
'''
position = 'after'
match_indent = true
payload = '''
-------------------------------------------------------------------------------------------------
    ----- API CODE GameObject.Font
    -------------------------------------------------------------------------------------------------

    SMODS.Fonts = {}
    SMODS.Font = SMODS.GameObject:extend {
        obj_table = SMODS.Fonts,
        set = 'Fonts',
        obj_buffer = {},
        disable_mipmap = false,
        required_params = {
            'key',
            'path',
            'render_scale',
            'TEXT_HEIGHT_SCALE',
            'TEXT_OFFSET',
            'FONTSCALE',
            'squish',
            'DESCSCALE',
        },
        register = function(self)
            if self.registered then
                sendWarnMessage(('Detected duplicate register call on object %s'):format(self.key), self.set)
                return
            end
            self.name = self.key
            SMODS.Font.super.register(self)
        end,
        inject = function(self)
            local file_path = self.path
            if file_path == 'DEFAULT' then return end

            self.full_path = (self.mod and self.mod.path or SMODS.path) ..
                'assets/fonts/' .. file_path
            local file_data = assert(NFS.newFileData(self.full_path),
                ('Failed to collect file data for Font %s'):format(self.key))
            local rs = (self.render_scale or 1) * G.TILESIZE
            self.FONT = assert(love.graphics.newFont(file_data, rs),
                ('Failed to initialize font data for Font %s'):format(self.key))

        end,
        process_loc_text = function() end,
    }


'''

[[patches]]
[patches.pattern]
target = '''=[SMODS Steamodded "src/game_object.lua"]'''
pattern = '''self.font = G.FONTS[type(self.font) == 'number' and self.font or 1] or G.FONTS[1]'''
position = 'at'
match_indent = true
payload = '''self.font = SMODS.Fonts[self.font] or G.FONTS[type(self.font) == 'number' and self.font or 1] or G.FONTS[1]'''